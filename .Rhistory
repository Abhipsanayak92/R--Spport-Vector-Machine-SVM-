#objective- predicting whether the person will go to the hospital for heartattack
#data importing
data<-read.csv(file.choose())
#data conversion as per the model requirement
data$Outcome<-as.factor(data$Outcome)
#data conversion as per the model requirement
data$Outcome<-as.factor(data$Outcome)
#objective- predicting whether the person will go to the hospital for heartattack
#data importing
data<-read.csv(file.choose())
View(data)
#objective- predicting whether the person will go to the hospital for heartattack
#data importing
data<-read.csv(file.choose())
#data conversion as per the model requirement
data$Outcome<-as.factor(data$Outcome)
#objective: To predict the cust will exit or not using Logistic Regression
#y=Exited
data<-read.csv(file.choose())
names(data)
View(data)
str(data)
library(ggplot2)
library(gridExtra)
attach(data)
data$Exited_flag<- as.factor(ifelse(data$Exited==1, "Yes", "No"))
table(data$Exited_flag)
2037/10000 #bad rate is 20%
data1<-data[c(-1,-2,-3)]#deleting row no, surname and cust id
data1$Exited<-NULL #deleting Exited column
names(data1)
str(data1)
summary(data1) #we can see that there is no missing values
#treatment of outliers
boxplot(data1$Age) ###has outlier
boxplot(data1$Tenure) ##no outlier
boxplot(data1$EstimatedSalary) #no outlier
boxplot(data1$Balance)  #no outlier
boxplot(data1$NumOfProducts) #has outlier
boxplot(data1$IsActiveMember)   #no outlier
#outlier treatment of Age
summary(data1$Age)
boxplot(data1$HasCrCard) # no outlier
upper<-44+1.5*IQR(data1$Age)
upper
data1$Age[data1$Age>upper]<-upper
summary(data1$Age)
boxplot(data1$Age)
sapply(data1$NumOfProducts, upper)
sapply(data1[NumOfProducts], upper)
#objective- predicting whether the person will go to the hospital for heartattack
#data importing
data<-read.csv(file.choose())
#data conversion as per the model requirement
data$Outcome<-as.factor(data$Outcome)
#data partition
library(caret)
Train<-createDataPartition(data$Outcome, p=0.7, list = FALSE)
training<-data[Train,]
testing <- data[-Train,]
#model
library(e1071)
svm_model1 <- svm(Outcome~., data=training) # this . means all variables
summary(svm_model1)
training$fiited<-svm_model1$fitted
#table(ypred, training$outcome)
confusionMatrix(svm_model1$fitted,training$Outcome)
#Accuracy on testing data set 7783
ypred1 = predict(svm_model1,testing)
#table (ypred1, testing$Outcome)
confusionMatrix(ypred1, testing$Outcome)
training$fiited<-NULL # deleting this column befor testing another model
#second model
svm_model2<-svm(Outcome ~., data=training, kernel ="linear")  #by ceafult kernel takes gaussian
#make a habbit of using linear kernel
summary(svm_model2)
confusionMatrix(svm_model2$fitted, training$Outcome)
#Accuracy on testing data set 7783
ypred1=predict(svm_model2, testing)
#table 9ypred1, testing$Outcome)
confusionMatrix(ypred1, testing$Outcome)
View(svm_model2)
heart_df <- read.csv(file.choose())
heart_df$target<-as.factor(heart_df$target)
heart_df$Sex<-as.factor(heart_df$Sex)
heart_df$CP<-as.factor(heart_df$CP)
heart_df$Fbs<-as.factor(heart_df$Fbs)
heart_df$ECG<-as.factor(heart_df$ECG)
heart_df$exang<-as.factor(heart_df$exang)
heart_df$thal<-as.factor(heart_df$thal)
heart_df$Age<-as.numeric(heart_df$Age)
heart_df$Trestbps<-as.numeric(heart_df$Trestbps)
heart_df$Chol<-as.numeric(heart_df$Chol)
heart_df$Thalach<-as.numeric(heart_df$Thalach)
heart_df$oldPeak<-as.numeric(heart_df$oldPeak)
heart_df$slope<-as.numeric(heart_df$slope)
heart_df$ca<-as.numeric(heart_df$ca)
str(heart_df)
#creating test and train data set
intrain <-createDataPartition(heart_df$target,p=0.7, list= FALSE) # list false because we need to divide by rowwise not columnwise
training<- heart_df[intrain,]
testing<-heart_df[-intrain,]
##summary and checcking missing value
summary(training)
sapply(training, function(x) sum(is.na(x)))
#builing model
##with cost
svm_model1 <- svm(target ~ . , data = training, cost=0.01, scale = FALSE)
summary(svm_model1)
#accuracy of model on training data
confusionMatrix(svm_model1$fitted, training$target)
##prediction
testing_pred<-predict(svm_model1,testing)
##accuracy of model on testing data
confusionMatrix(testing_pred,testing$target)
##how to increase the accuracy on the model =0.1 or 100
tune.out=tune(svm, target ~., data = training, kernel = "linear",
ranges=list(cost=c(0.001,0.01,0.1,1, 5, 10, 100)))
#different cost values are taken randomly
summary(tune.out)
###o/p- which has lowest eroor gives highest accuracy
#here cost value 1 is having lowest error i.e. 16.6
#best model
bestmod=tune.out$best.model
summary(bestmod)
#Accuracy of model on training data
confusionMatrix(bestmod$fitted, training$target)
##prediction on testing
ypred=predict(bestmod,testing)
table(predict=ypred, truth=testing$target)
#accuracy of model on test data
confusionMatrix(ypred,testing$target)
View(heart_df)
View(heart_df)
